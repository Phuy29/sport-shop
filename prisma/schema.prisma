// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  expires      DateTime
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          USER_ROLE @default(USER)
  active        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  orders   Order[]
}

enum USER_ROLE {
  ADMIN
  USER
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id                 String               @id @default(uuid())
  name               String
  description        String?
  status             PRODUCT_STATUS       @default(DRAFT)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  collectionId       String?
  collection         ProductCollection?   @relation(fields: [collectionId], references: [id])
  price              Float                @default(0)
  inventory          Int                  @default(0)
  images             Image[]
  options            ProductOption[]
  variants           ProductVariant[]
  orderItem          OrderItem[]
  ProductOptionValue ProductOptionValue[]

  @@index([collectionId])
}

model ProductOption {
  id          String               @id @default(uuid())
  name        String
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  productId   String?
  product     Product?             @relation(fields: [productId], references: [id])
  optionValue ProductOptionValue[]

  @@index([productId])
}

model ProductOptionValue {
  id        String          @id @default(uuid())
  value     String
  optionId  String?
  option    ProductOption?  @relation(fields: [optionId], references: [id])
  variantId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  productId String?
  product   Product?        @relation(fields: [productId], references: [id])
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@index([optionId])
  @@index([variantId])
  @@index([productId])
}

model ProductVariant {
  id          String               @id @default(uuid())
  name        String
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  price       Float                @default(0)
  originPrice Float                @default(0)
  inventory   Int                  @default(1)
  productId   String?
  product     Product?             @relation(fields: [productId], references: [id])
  optionValue ProductOptionValue[]
  orderItems  OrderItem[]

  @@index([productId])
}

enum PRODUCT_STATUS {
  ACTIVE
  DRAFT
}

model ProductCollection {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Image {
  id        String   @id @default(uuid())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId String
  product   Product  @relation(fields: [productId], references: [id])

  @@index([productId])
}

model Order {
  id                        String       @id @default(uuid())
  createdAt                 DateTime     @default(now())
  updatedAt                 DateTime     @updatedAt
  isPaid                    Boolean      @default(false)
  phone                     String       @default("")
  address                   String       @default("")
  status                    ORDER_STATUS @default(PENDING)
  userId                    String?
  user                      User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items                     OrderItem[]
  amount                    Float        @default(0)
  quantity                  Int          @default(0)
  stripePaymentIntentId     String?
  stripePaymentIntentStatus String?

  @@index([userId])
}

model OrderItem {
  id               String          @id @default(uuid())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  orderId          String?
  order            Order?          @relation(fields: [orderId], references: [id])
  productId        String?
  product          Product?        @relation(fields: [productId], references: [id])
  quantity         Int
  productVariantId String?
  productVariant   ProductVariant? @relation(fields: [productVariantId], references: [id])

  @@index([orderId])
  @@index([productVariantId])
  @@index([productId])
}

enum ORDER_STATUS {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}
